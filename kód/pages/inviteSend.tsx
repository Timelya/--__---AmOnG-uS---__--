import type { NextPage } from "next";
import Head from "next/head";
import { Component, useState } from "react";
import { prisma } from "../lib/prisma";
import { useRouter } from "next/router";
import { sha256 } from "js-sha256";
import { GetServerSideProps } from "next";
import moment from "moment";
import Navbar from "./Components/Navbar";
import DarkMode from "./Components/DarkMode";
import { IonDatetime } from '@ionic/react';
//import DropDownMenu from "./DropDownMenu";
import { Dropdown } from "@nextui-org/react";
import React from "react";
import DropdownItem from "@nextui-org/react/types/dropdown/dropdown-item";



interface FormData {
    id: string;
    eventid: string;
    userid: string;
    accepted: string;
}

interface Event {
    events: {

    };
}

interface Invite {
    invites: {
        id: string;
        eventid: string;
        userid: string;
        accepted: string;
    }
    events :{
        id: string;
        name: string;
    }[]
    users :{
        id: string;
        name: string;
    }[]
}

const InviteSend: NextPage<Invite> = ({ invites, events, users }) => {
    const [form, setForm] = useState<FormData>({
        id: "",
        eventid: "",
        userid: "",
        accepted: "0"
    });
    const router = useRouter();
    const refreshData = () => {
        router.replace(router.asPath);
    };
    function handleSubmit(data: FormData) {
        // if (!data.eventid) {
        //     alert("Esemély neve nem lehet üres");
        //     return;
        // }
        // if (!data.userid) {
        //     alert("Üres meghívó nem lehet");
        //     return;
        // }
        console.log(data);
        // CREATE

        // fetch("api/createInvite", {
        //     body: JSON.stringify(data),
        //     headers: {
        //         "Content-Type": "application/json",
        //     },
        //     method: "POST",
        // }).then(() => {
        //     setForm({
        //         id: "",
        //         eventid: "",
        //         userid: "",
        //         accepted: "0"
        //     });
        //     refreshData();
        // });
    }

    const eventsMenu = events.map(x => x.id)
    const [selectedUsers, setSelectedUsers] = React.useState(new Set(["text"]));

    const selectedUsersValue = React.useMemo(
        () => Array.from(selectedUsers).join(", ").replaceAll("_", " "),
        [selectedUsers]
    );

    const [selected, setSelected] = React.useState(new Set(["text"]));

    const selectedValue = React.useMemo(
        () => Array.from(selected).join(", ").replaceAll("_", " "),
        [selected]
    );
    
    const menuItems = [
        { key: "new", name: "New File" },
        { key: "copy", name: "Copy Link" },
        { key: "edit", name: "Edit File" },
        { key: "delete", name: "Delete File" },
    ];
    return (
        <>
            <Navbar />

            <DarkMode />
            <div>
                <div className="grid place-items-start md:place-items-center ...">
                    <Head>
                        <title className="bg-gradient-to-b from-black via-indigo-900 to-black ...">
                            Létrehozás
                        </title>
                        <meta name="description" content="Generated by create next app" />
                        <link rel="icon" href="/favicon.ico" />
                    </Head>

                    <div className="square grid place-items-start md:place-items-center ...">
                        <h1 id="regText" className="m-4 text-2xl font-bold text-center">
                            Rendezvény létrehozása
                        </h1>
                        <p style={{ fontSize: 1 }}><br></br></p>

                        <form
                            className="w-auto min-w-[25%] max-w-min mx-auto space-y-6 flex flex-col items-stretch"
                            onSubmit={(e) => {
                                e.preventDefault();
                                handleSubmit(form);
                            }}
                        >

                            <div style={{ color: "#9ca3af" }}>
                                <div className="form">
                                    
                                    <Dropdown>
                                        <Dropdown.Button flat>{selectedValue}</Dropdown.Button>
                                        <Dropdown.Menu aria-label="Dynamic Actions" items={menuItems}
                                            // onChange=(e) => setForm({ ...form, eventid: e.target.value })
                                            color="secondary"
                                            disallowEmptySelection
                                            selectionMode="single"
                                            selectedKeys={selected}
                                            onSelectionChange={setSelected}>
                                                {
                                                    events.map(x =><Dropdown.Item key={x.id}>{x.name}</Dropdown.Item>)
                                                }
                                            {/* {(item) => (
                                                <Dropdown.Item
                                                    key={item.key}
                                                >
                                                    {item.name}
                                                </Dropdown.Item>
                                            )} */}
                                        </Dropdown.Menu>
                                    </Dropdown>
                                    <Dropdown>
                                        <Dropdown.Button flat>{selectedUsersValue}</Dropdown.Button>
                                        <Dropdown.Menu aria-label="Dynamic Actions" items={menuItems}
                                            color="primary"                                            
                                            selectionMode="mutliple"
                                            selectedKeys={selectedUsers}
                                            onSelectionChange={setSelectedUsers}>
                                            {
                                                users.map(x =><Dropdown.Item key={x.id}>{x.name}</Dropdown.Item>)
                                            }
                                        </Dropdown.Menu>
                                    </Dropdown>
                                </div>
                                <div className="form">

                                    <span className="input-border"></span>
                                </div>
                                <p style={{ fontSize: 1 }}><br></br></p>

                            </div>
                            <button type="submit" className="Susbutton">
                                <svg height="36px" width="36px" viewBox="0 0 36 36" xmlns="http://www.w3.org/2000/svg">
                                    <rect fill="#70494a" y="0" x="0" height="36" width="36"></rect>
                                    <path d="M38.67,42H11.52C11.27,40.62,11,38.57,11,36c0-5,0-11,0-11s1.44-7.39,3.22-9.59 c1.67-2.06,2.76-3.48,6.78-4.41c3-0.7,7.13-0.23,9,1c2.15,1.42,3.37,6.67,3.81,11.29c1.49-0.3,5.21,0.2,5.5,1.28 C40.89,30.29,39.48,38.31,38.67,42z" fill="#e53935"></path>
                                    <path d="M39.02,42H11.99c-0.22-2.67-0.48-7.05-0.49-12.72c0.83,4.18,1.63,9.59,6.98,9.79 c3.48,0.12,8.27,0.55,9.83-2.45c1.57-3,3.72-8.95,3.51-15.62c-0.19-5.84-1.75-8.2-2.13-8.7c0.59,0.66,3.74,4.49,4.01,11.7 c0.03,0.83,0.06,1.72,0.08,2.66c4.21-0.15,5.93,1.5,6.07,2.35C40.68,33.85,39.8,38.9,39.02,42z" fill="#b71c1c"></path>
                                    <path d="M35,27.17c0,3.67-0.28,11.2-0.42,14.83h-2C32.72,38.42,33,30.83,33,27.17 c0-5.54-1.46-12.65-3.55-14.02c-1.65-1.08-5.49-1.48-8.23-0.85c-3.62,0.83-4.57,1.99-6.14,3.92L15,16.32 c-1.31,1.6-2.59,6.92-3,8.96v10.8c0,2.58,0.28,4.61,0.54,5.92H10.5c-0.25-1.41-0.5-3.42-0.5-5.92l0.02-11.09 c0.15-0.77,1.55-7.63,3.43-9.94l0.08-0.09c1.65-2.03,2.96-3.63,7.25-4.61c3.28-0.76,7.67-0.25,9.77,1.13 C33.79,13.6,35,22.23,35,27.17z" fill="#212121"></path>
                                    <path d="M17.165,17.283c5.217-0.055,9.391,0.283,9,6.011c-0.391,5.728-8.478,5.533-9.391,5.337 c-0.913-0.196-7.826-0.043-7.696-5.337C9.209,18,13.645,17.32,17.165,17.283z" fill="#01579b"></path>
                                    <path d="M40.739,37.38c-0.28,1.99-0.69,3.53-1.22,4.62h-2.43c0.25-0.19,1.13-1.11,1.67-4.9 c0.57-4-0.23-11.79-0.93-12.78c-0.4-0.4-2.63-0.8-4.37-0.89l0.1-1.99c1.04,0.05,4.53,0.31,5.71,1.49 C40.689,24.36,41.289,33.53,40.739,37.38z" fill="#212121"></path>
                                    <path d="M10.154,20.201c0.261,2.059-0.196,3.351,2.543,3.546s8.076,1.022,9.402-0.554 c1.326-1.576,1.75-4.365-0.891-5.267C19.336,17.287,12.959,16.251,10.154,20.201z" fill="#81d4fa"></path>
                                    <path d="M17.615,29.677c-0.502,0-0.873-0.03-1.052-0.069c-0.086-0.019-0.236-0.035-0.434-0.06 c-5.344-0.679-8.053-2.784-8.052-6.255c0.001-2.698,1.17-7.238,8.986-7.32l0.181-0.002c3.444-0.038,6.414-0.068,8.272,1.818 c1.173,1.191,1.712,3,1.647,5.53c-0.044,1.688-0.785,3.147-2.144,4.217C22.785,29.296,19.388,29.677,17.615,29.677z M17.086,17.973 c-7.006,0.074-7.008,4.023-7.008,5.321c-0.001,3.109,3.598,3.926,6.305,4.27c0.273,0.035,0.48,0.063,0.601,0.089 c0.563,0.101,4.68,0.035,6.855-1.732c0.865-0.702,1.299-1.57,1.326-2.653c0.051-1.958-0.301-3.291-1.073-4.075 c-1.262-1.281-3.834-1.255-6.825-1.222L17.086,17.973z" fill="#212121"></path>
                                    <path d="M15.078,19.043c1.957-0.326,5.122-0.529,4.435,1.304c-0.489,1.304-7.185,2.185-7.185,0.652 C12.328,19.467,15.078,19.043,15.078,19.043z" fill="#e1f5fe"></path>
                                </svg>
                                <span className="now">most!</span>
                                <span className="play">Küldés</span>
                            </button>
                        </form>
                    </div>
                </div>
            </div>
        </>
    );
};
export const getServerSideProps: GetServerSideProps = async () => {
    // READ all notes from DB
    
    let events = await prisma?.event.findMany({
        select: {
          id: true,
          name: true
        },
      });
    let users = await prisma?.user.findMany({
        select:{
            id: true,
            name: true
        }
    })
    users =  JSON.parse(JSON.stringify(users));
    events = JSON.parse(JSON.stringify(events));
    return {
        props: {
            events,
            users,
        },
    };
};
export default InviteSend;




