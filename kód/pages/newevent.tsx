import type { NextPage } from "next";
import Head from "next/head";
import { Component, useState } from "react";
import { prisma } from "../lib/prisma";
import { useRouter } from "next/router";
import { sha256 } from "js-sha256";
import { GetServerSideProps } from "next";
import moment from "moment";

interface FormData {
	id: string;
	name: string;
	startString: string;
	endString: string;
	start: string;
	end: string;
}

interface Event {
	events: {
		id: string;
		name: string;
		start: number;
		end: number;
	}[];
}

const MakeEvent: NextPage<Event> = ({ events }) => {
	const [form, setForm] = useState<FormData>({
		name: "",
		start: "",
		end: "",
		id: "",
		startString: "",
		endString: "",
	});
	const router = useRouter();
	const refreshData = () => {
		router.replace(router.asPath);
	};
	function handleSubmit(data: FormData) {
		if (!data.name) {
			alert("Esemély neve nem lehet üres");
			return;
		}

		if (!data.start || !data.end) {
			alert("Időpont nem lehet üres");
			return;
		}

		if (events.find((x) => x.name == data.name)) {
			alert("Már létezik ez az esemény");
			return;
		}
		// CREATE

		fetch("api/createEvent", {
			body: JSON.stringify(data),
			headers: {
				"Content-Type": "application/json",
			},
			method: "POST",
		}).then(() => {
			setForm({
				name: "",
				start: "",
				end: "",
				id: "",
				startString: "",
				endString: "",
			});
			refreshData();
		});
	}
	return (
		<>
			<div className="background: bg-gradient-to-t from-blue-900 to-rose-700 ...">
				<div className="grid place-items-start md:place-items-center ...">
					<Head>
						<title className="bg-gradient-to-b from-black via-indigo-900 to-black ...">
							Regisztráció
						</title>
						<meta name="description" content="Generated by create next app" />
						<link rel="icon" href="/favicon.ico" />
					</Head>
					<div className="square grid place-items-start md:place-items-center ...">
						<h1 id="regText" className="m-4 text-2xl font-bold text-center">
							Regisztráció
						</h1>

						<form
							className="w-auto min-w-[25%] max-w-min mx-auto space-y-6 flex flex-col items-stretch"
							onSubmit={(e) => {
								e.preventDefault();
								handleSubmit(form);
							}}
						>
							<input
								type="text"
								placeholder="Esemény neve"
								value={form.name}
								onChange={(e) => setForm({ ...form, name: e.target.value })}
								className="p-1 border-2 border-gray-600 rounded"
							/>

							<input
								type="datetime-local"
								value={form.startString}
								onChange={(e) =>
									setForm({ ...form, startString: e.target.value })
								}
							/>
							<input
								type="datetime-local"
								value={form.endString}
								onChange={(e) =>
									setForm({ ...form, endString: e.target.value })
								}
							/>

							<button
								type="submit"
								className="p-1 text-white bg-blue-500 rounded"
							>
								Register
							</button>
						</form>
					</div>
				</div>
			</div>
			{(form.start = moment(form.startString).format())}
			{(form.end = moment(form.endString).format())}
		</>
	);
};
export const getServerSideProps: GetServerSideProps = async () => {
	// READ all notes from DB
	let events = await prisma?.event.findMany({
		select: {
			id: true,
			name: true,
			start: true,
			end: true,
		},
	});
	events = JSON.parse(JSON.stringify(events));
	return {
		props: {
			events,
		},
	};
};
export default MakeEvent;
